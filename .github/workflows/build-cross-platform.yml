name: Cross-Platform Build and Release

on:
  # Automatic trigger when a tag is pushed
  push:
    tags:
      - 'v*'  # Matches tags like v0.0.4, v1.0.0, etc.
  
  # Manual trigger with options
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag (e.g., v0.0.5)'
        required: true
        type: string
      release_notes:
        description: 'Release notes (optional, uses auto-generated if empty)'
        required: false
        type: string

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3
      
    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1.14
      with:
        cmake-version: '3.22'
    
    - name: Configure CMake (Windows)
      run: |
        mkdir build
        cd build
        cmake .. -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release
    
    - name: Build Windows VST3
      run: |
        cd build
        cmake --build . --config Release --parallel
    
    - name: Package Windows VST3
      run: |
        cd build
        7z a YMulator-Synth-Windows-VST3.zip "src/YMulatorSynthAU_artefacts/Release/VST3/YMulator Synth.vst3"
    
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: YMulator-Synth-Windows
        path: build/YMulator-Synth-Windows-VST3.zip

  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1.14
      with:
        cmake-version: '3.22'
    
    - name: Configure CMake (macOS)
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
    
    - name: Build macOS plugins
      run: |
        cd build
        cmake --build . --parallel
    
    - name: Package macOS plugins
      run: |
        cd build
        zip -r YMulator-Synth-macOS-AU.zip "src/YMulatorSynthAU_artefacts/Release/AU/YMulator Synth.component"
        zip -r YMulator-Synth-macOS-VST3.zip "src/YMulatorSynthAU_artefacts/Release/VST3/YMulator Synth.vst3"
        zip -r YMulator-Synth-macOS-Standalone.zip "src/YMulatorSynthAU_artefacts/Release/Standalone/YMulator Synth.app"
    
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: YMulator-Synth-macOS
        path: |
          build/YMulator-Synth-macOS-AU.zip
          build/YMulator-Synth-macOS-VST3.zip
          build/YMulator-Synth-macOS-Standalone.zip

  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          build-essential \
          libasound2-dev \
          libjack-jackd2-dev \
          ladspa-sdk \
          libcurl4-openssl-dev \
          libfreetype6-dev \
          libx11-dev \
          libxcomposite-dev \
          libxcursor-dev \
          libxext-dev \
          libxinerama-dev \
          libxrandr-dev \
          libxrender-dev \
          libglu1-mesa-dev \
          mesa-common-dev
    
    - name: Configure CMake (Linux)
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
    
    - name: Build Linux plugins
      run: |
        cd build
        cmake --build . --parallel
    
    - name: Package Linux plugins
      run: |
        cd build
        tar -czf YMulator-Synth-Linux-VST3.tar.gz "src/YMulatorSynthAU_artefacts/Release/VST3/YMulator Synth.vst3"
        tar -czf YMulator-Synth-Linux-Standalone.tar.gz "src/YMulatorSynthAU_artefacts/Release/Standalone/YMulator Synth"
    
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: YMulator-Synth-Linux
        path: |
          build/YMulator-Synth-Linux-VST3.tar.gz
          build/YMulator-Synth-Linux-Standalone.tar.gz

  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Windows assets
        cp artifacts/YMulator-Synth-Windows/*.zip release-assets/
        
        # macOS assets
        cp artifacts/YMulator-Synth-macOS/*.zip release-assets/
        
        # Linux assets
        cp artifacts/YMulator-Synth-Linux/*.tar.gz release-assets/
        
        # Create a combined package
        cd release-assets
        zip -r YMulator-Synth-All-Platforms.zip *
        cd ..
        
        ls -la release-assets/
    
    - name: Determine version tag
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          # Tag push - use the tag name
          VERSION=${GITHUB_REF#refs/tags/}
        else
          # Manual trigger - use input
          VERSION=${{ github.event.inputs.version_tag }}
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Version tag: $VERSION"
    
    - name: Generate release notes
      id: release_notes
      run: |
        if [ -n "${{ github.event.inputs.release_notes }}" ]; then
          # Use provided release notes
          echo "NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "${{ github.event.inputs.release_notes }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          # Auto-generate release notes
          VERSION=${{ steps.get_version.outputs.VERSION }}
          echo "NOTES<<EOF" >> $GITHUB_OUTPUT
          cat << 'RELEASE_NOTES' >> $GITHUB_OUTPUT
        ## YMulator Synth $VERSION
        
        ### 🎵 Cross-Platform Release
        
        This release includes binaries for all supported platforms:
        
        #### 🪟 Windows
        - VST3 plugin
        - Standalone application
        
        #### 🍎 macOS
        - Audio Unit (AU)
        - Audio Unit v3 (AUv3)
        - VST3 plugin
        - Standalone application
        
        #### 🐧 Linux
        - VST3 plugin
        - Standalone application
        
        ### 📦 Installation
        
        1. Download the appropriate package for your platform
        2. Extract the archive
        3. Copy plugins to your plugin directory:
           - **Windows VST3**: `C:\Program Files\Common Files\VST3\`
           - **macOS AU**: `/Library/Audio/Plug-Ins/Components/`
           - **macOS VST3**: `/Library/Audio/Plug-Ins/VST3/`
           - **Linux VST3**: `~/.vst3/`
        
        ### 🙏 Acknowledgments
        
        Built with JUCE framework and ymfm emulation library.
        
        RELEASE_NOTES
          echo "EOF" >> $GITHUB_OUTPUT
        fi
    
    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.get_version.outputs.VERSION }}
        name: YMulator Synth ${{ steps.get_version.outputs.VERSION }}
        body: ${{ steps.release_notes.outputs.NOTES }}
        artifacts: "release-assets/*"
        artifactContentType: application/octet-stream
        draft: false
        prerelease: false
        allowUpdates: true
        token: ${{ secrets.GITHUB_TOKEN }}